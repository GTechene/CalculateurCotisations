@page "/"
@using System.ComponentModel.DataAnnotations
@using CalculateurCotisationsFront.Components.Data
@inject CotisationsApiHttpClient ApiHttpClient

<PageTitle>Calculateur de cotisations</PageTitle>

<h1>Bienvenue</h1>

<p class="intro">
    Ce calculateur est à destination des travailleuses et travailleurs indépendant·e·s se trouvant en métropole et ayant un statut de profession libérale non réglementée, artisan ou commerçant depuis plus d'un an. D'autres cas pourront être implémentés à l'avenir mais ce n'est pas prévu pour l'instant.
</p>
<EditForm Model="Form" FormName="Name" OnValidSubmit="@SubmitForm">
    <DataAnnotationsValidator />
    <a data-bs-content="Il s'agit du revenu annuel effectivement versé, à ne pas confondre avec le revenu fiscal qui comprend aussi la CRDS et la CSG non déductible." class="btn btn-primary btn-sm explication" data-bs-placement="bottom" title="Revenu net réellement versé" tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .25rem;">
        <span class="info-icon"></span>
    </a>
    <label for="revenuNet" class="form-label fs-4">Revenu net annuel :</label>
    <div class="input-group mb-3">
        <span class="input-group-text">€</span>
        <InputNumber @bind-Value="Form!.RevenuNet" ParsingErrorMessage="Merci d'entrer un nombre entier positif." id="revenuNet" class="form-control" title="Revenu effectivement versé (ou prévu) pour l'année choisie, hors charges, CSG, etc..." required/>
        <InputSelect @bind-Value="Form.Annee" id="annee" class="form-control form-select" title="Année à laquelle vous souhaitez calculer vos cotisations">
            <option value="2024" checked="@Form.Annee == 2024">2024</option>
            <option value="2023" checked="@Form.Annee == 2023">2023</option>
        </InputSelect>
    </div>
    
    <div class="accordion mb-3" id="accordionFacultatif">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button btn-secondary collapsed p-2" type="button" data-bs-toggle="collapse" data-bs-target="#accordionCollapse" aria-expanded="@(Form.CotisationsFacultatives > 0)" aria-controls="accordionCollapse">
                    Options
                </button>
            </h2>
            <div id="accordionCollapse" class="accordion-collapse collapse @(Form.CotisationsFacultatives > 0 ? "show" : "")" data-bs-parent="#accordionFacultatif">
                <div class="accordion-body" id="facultatif">
                    <label for="cotisationsFacultatives" class="form-label" title="Cotisations type Madelin, PER...">Cotisations facultatives :</label>
                    <div class="input-group ms-1" id="inputGroupFacultatif">
                        <span class="input-group-text">€</span>
                        <InputNumber @bind-Value="Form!.CotisationsFacultatives" ParsingErrorMessage="Merci d'entrer un nombre entier positif." id="cotisationsFacultatives" class="form-control" title="Entrez ici les cotisations facultatives (Madelin, PER...) pour l'année choisie" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <input type="submit" id="submitButton" class="btn btn-primary" title="Cliquez ici pour lancer le calcul des cotisations" value="Lancer le calcul" disabled="@(Form.RevenuNet <= 0)"/>
</EditForm>
@if (Cotisations is not null)
{
    <div id="resultsContainer" class="mt-5">
        <CotisationsTable Cotisations="@Cotisations" RevenuNet="@Form!.RevenuNet" Annee="@Form.Annee"></CotisationsTable>
    </div>
}

<script>
    document.querySelectorAll('input[type="number"]')
        .forEach(input => {
            input.addEventListener('focusin', (event) => {
                if (event.target.value == "0")
                    event.target.value = "";
            })
            input.addEventListener('focusout', (event) => {
                if (event.target.value == "")
                    event.target.value = "0";
            })
        });

    document.getElementById("revenuNet").addEventListener("input", (event) => {
        if (event.target.value == "0" || event.target.value == "") {
            document.getElementById("submitButton").disabled = true;
        }
        else {
            document.getElementById("submitButton").disabled = false;
        }
    });
</script>

@code
{
    [SupplyParameterFromForm]
    MyForm? Form { get; set; }
    ResultatPrecisDeCotisationsAvecExplications? Cotisations { get; set; }

    protected override Task OnInitializedAsync()
    {
        Form ??= new MyForm();
        return Task.CompletedTask;
    }

    public class MyForm
    {
        [Required]
        [Range(1, int.MaxValue)]
        public decimal RevenuNet { get; set; }

        [Required]
        public int Annee { get; set; }

        public int CotisationsFacultatives { get; set; }
    }

    private async Task SubmitForm()
    {
        if (Form!.RevenuNet > 0)
        {
            Cotisations = await ApiHttpClient.GetCotisations(Form.RevenuNet, Form.Annee, Form.CotisationsFacultatives);
        }
    }
}